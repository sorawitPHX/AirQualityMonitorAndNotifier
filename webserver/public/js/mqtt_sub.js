let url = window.location.href
url = url.replace(/(http:\/\/|https:\/\/)/, '').replace(/\/\?.*/, '')
const ws = new WebSocket(`wss://${url}`);
const urlParams = new URLSearchParams(window.location.search);
let mode = urlParams.get('mode') || 'mqtt';
const gasQualityColors = {
    "Good": "green-600",
    "Normal": "lime-500",
    "Unhealthy": "yellow-500",
    "Very Unhealthy": "amber-600",
    "Poor": "orange-600",
    "Dangerous": "red-600",
}

const gasQualityTH = {
    "Good": "‡∏î‡∏µ",
    "Normal": "‡∏õ‡∏Å‡∏ï‡∏¥",
    "Unhealthy": "‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
    "Very Unhealthy": "‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å",
    "Poor": "‡∏¢‡πà‡∏≥‡πÅ‡∏¢‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å",
    "Dangerous": "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"
}

const humidQualityColors = {
    'Too Dry': 'red-600',
    'Dry': 'yellow-500',
    'Normal': 'green-500',
    'Humid': 'sky-400',
    'Too Humid': 'blue-600'
}
const temperatureQualityColors = {
    'Very Cold': 'blue-600',
    'Cold': 'sky-500',
    'Cool': 'cyan-500',
    'Normal': 'green-500',
    'Hot': 'orange-500',
    'Very Hot': 'red-500',
}

let lastQualityStatus = '';  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
async function gasAlarm(type, quality) {
    if (quality === lastQualityStatus) {
        return;  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    }
    if (['Unhealthy', 'Very Unhealthy', 'Poor', 'Dangerous'].includes(quality)) {
        let typeTH = '';
        switch (type) {
            case 'pm25':
                typeTH = 'PM 2.5';
                break;
            case 'co2':
                typeTH = '‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡πÑ‡∏î‡∏≠‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå';
                break;
            case 'co':
                typeTH = '‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏°‡∏≠‡∏ô‡∏ô‡∏≠‡∏Å‡πÑ‡∏ã‡∏î‡πå';
                break;
        }
        const qualityTH = gasQualityTH[quality];
        const text = `${typeTH} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö${qualityTH}`;
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
        if ('Notification' in window && Notification.permission === 'granted') {
            new Notification('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', {
                body: text,
                icon: 'icon-url.png',
            });
        }
        // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        await convertTextToSpeech(text);
        // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        lastQualityStatus = quality;
    }
}

const speechQueue = [];
let isPlaying = false;
let isMuted = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
let currentAudio = null; // ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏≠‡∏ö‡πÄ‡∏à‡πá‡∏Å‡∏ï‡πå Audio ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
function toggleMute(button) {
    isMuted = !isMuted;
    button.textContent = isMuted ? 'üîá ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á' : 'üîä ‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á';
    

    // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏≤‡∏Å‡∏Å‡∏î‡∏õ‡∏¥‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    if (isMuted && currentAudio) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
        currentAudio = null;
        speechQueue.length = 0; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        isPlaying = false;
    }
}

async function convertTextToSpeech(text) {
    if (text.trim() === '' || isMuted) {
        return;
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Queue
    speechQueue.push(text);

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô
    if (!isPlaying) {
        playNextInQueue();
    }
}

async function playNextInQueue() {
    if (speechQueue.length === 0 || isMuted) {
        isPlaying = false;
        return;
    }

    isPlaying = true;
    const text = speechQueue.shift(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß

    try {
        const response = await fetch('/convert-text-to-speech', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ text })
        });

        if (response.ok) {
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            currentAudio = audio; // ‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

            // ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏à‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            audio.onended = () => {
                currentAudio = null;
                playNextInQueue();
            };

            audio.play();
        } else {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°');
            playNextInQueue();
        }
    } catch (error) {
        console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
        playNextInQueue();
    }
}

function adjustClassColor(element, label, defineLabelColors, needClass = 'text') {
    let ClassList = Array.from(element.classList)
    const colorClass = defineLabelColors[label]
    if (colorClass) {
        const newClass = `${needClass}-${colorClass}`
        ClassList.pop()
        ClassList.push(newClass)
        element.classList = ''
        ClassList.forEach(c => {
            element.classList.add(c)
        })
    }
}

function changeBgColor(element, newBgClass) {
    element.classList.forEach(cls => {
        if (/^bg-[a-z]+-\d+$/.test(cls)) {
            element.classList.remove(cls);
        }
    });
    element.classList.add(newBgClass);
}

const cardContainer = document.getElementById('card-container')
document.addEventListener('DOMContentLoaded', () => {
    const searchBluetoothContainer = document.getElementById('searchBluetoothContainer')
    if (mode == 'mqtt') {
        ws.onopen = () => {
            console.log("Connected to WebSocket Server");
        };
        ws.onmessage = async (event) => {
            const data = JSON.parse(event.data);
            let dataObj = {}
            dataObj[data.header] = data.value
            dataObj['timestamp'] = new Date()
            // console.log(data)
            // console.log(dataObj)
            updateElement(dataObj)
        };
        ws.onerror = (error) => {
            console.error("WebSocket Error:", error);
        };
        ws.onclose = (error => {
            alert('‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏Ç‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Server ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')
            window.location.reload()
        })
    } else if (mode == 'bluetooth') {
        searchBluetoothContainer.classList.toggle('hidden')
    }

})

const lastestUpdateSpan = document.getElementById('lastestUpdate')
let pm25Value
let co2Value
let coValue
async function updateElement(data) {
    for (const [key, valueData] of Object.entries(data)) {
        if (key != 'timestamp') {
            const card = cardContainer.querySelector(`#${key}Card`)
            if (card) {
                if (data.pm25) pm25Value = data.pm25.value
                if (data.co2) co2Value = data.co2.value
                if (data.co) coValue = data.co.value
                const timestamp = new Date(data.timestamp).toLocaleString('th-TH')
                lastestUpdateSpan.innerText = timestamp
                const value = card.querySelector('[name="value"]')
                const unit = card.querySelector('[name="unit"]')
                const quality = card.querySelector('[name="quality"]')
                const updatedTime = card.querySelector('[name="updatedTime"]')
                value.innerHTML = (valueData.value)
                unit.innerHTML = (valueData.unit)
                quality.innerHTML = (valueData.quality)
                updatedTime.innerHTML = (timestamp)
                await gasAlarm(key, valueData.quality)
                const aqi = calOverallAQI(pm25Value, co2Value, coValue)
                updateQualityOverall(aqi)
                if (key == 'humid') {
                    adjustClassColor(quality, valueData.quality, humidQualityColors, 'text')
                    adjustClassColor(card, valueData.quality, humidQualityColors, 'border')
                } else {
                    adjustClassColor(quality, valueData.quality, gasQualityColors, 'text')
                    adjustClassColor(card, valueData.quality, gasQualityColors, 'border')
                }
            }
        }
    }
}

function updateQualityOverall(aqi) {
    if (aqi) {
        const overallElement = document.getElementById('QualityOverall')
        const aqiElement = overallElement.querySelector('#AQIValue')
        const aqiEmojiElement = overallElement.querySelector('#AQIEmoji')
        const aqiQualityElement = overallElement.querySelector('#AQIQuality')
        aqiElement.innerText = `AQI: ${aqi.toFixed(2)}`
        if (aqi <= 50) {
            changeBgColor(overallElement, 'bg-green-500')
            aqiEmojiElement.innerText = 'üòÄ'
            aqiQualityElement.innerText = `‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û`
        } else if (aqi <= 100) {
            changeBgColor(overallElement, 'bg-lime-500')
            aqiEmojiElement.innerText = 'üòê'
            aqiQualityElement.innerText = `‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÄ‡∏î‡πá‡∏Å, ‡∏Ñ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î)`
        } else if (aqi <= 150) {
            changeBgColor(overallElement, 'bg-orange-500')
            aqiEmojiElement.innerText = 'ü´§'
            aqiQualityElement.innerText = `‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏£‡∏Ñ‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏≠‡∏≤‡∏à‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£`
        } else if (aqi <= 200) {
            changeBgColor(overallElement, 'bg-red-500')
            aqiEmojiElement.innerText = 'üò¢'
            aqiQualityElement.innerText = `‡πÑ‡∏°‡πà‡∏î‡∏µ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å`

        } else if (aqi <= 300) {
            changeBgColor(overallElement, 'bg-violet-500')
            aqiEmojiElement.innerText = 'üò≠'
            aqiQualityElement.innerText = `‡πÅ‡∏¢‡πà‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏∏‡∏¢‡πÅ‡∏£‡∏á`

        } else {
            changeBgColor(overallElement, 'bg-stone-950')
            aqiEmojiElement.innerText = 'üíÄ'
            aqiQualityElement.innerText = `‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°`

        }

    }
}

function calOverallAQI(pm25Value, co2Value, coValue) {
    if (pm25Value && co2Value && coValue) {
        const aqiPM25 = (pm25Value / 50) * 100
        const aqico2 = ((co2Value - 400) / 600) * 100
        const aqico = (coValue / 10) * 100
        const aqiOverall = (0.5 * aqiPM25) + (0.3 * aqico2) + (0.2 * aqico)
        return aqiOverall
    }
}

async function requestNotificationPermission() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ('Notification' in window) {
        if (Notification.permission === 'default') {
            const permission = await Notification.requestPermission();
            if (permission === 'granted') {
                console.log('User granted notification permission');
            } else {
                console.log('User denied notification permission');
            }
        } else if (Notification.permission === 'granted') {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏•‡πâ‡∏ß
            console.log('Permission already granted');
        } else {
            console.log('Notification permission denied');
        }
    } else {
        console.log('Notifications not supported in this browser');
    }
}

function showNotification(title, message) {
    if (Notification.permission === 'granted') {
        new Notification(title, { body: message });
    } else {
        console.log('Permission for notifications is not granted');
    }
}

document.getElementById('notifyButton').addEventListener('click', async () => {
    await requestNotificationPermission();
    showNotification('‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!', '‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏°‡πà‡∏î‡∏µ');
});

document.getElementById('selectMode').addEventListener('change', (e) => {
    const newMode = e.target.value;
    const newUrl = `${window.location.pathname}?mode=${newMode}`;
    window.history.pushState({}, '', newUrl);
    location.reload()
})

let bleDevice;
let bleServer;
let bleService;
let bleCharacteristic;
const SERVICE_UUID = "12345678-1234-5678-1234-56789abcdef0"
const CHARACTERISTIC_UUID = "abcdef01-1234-5678-1234-56789abcdef0"
async function connectBLE() {
    const bluetoothStatusElement = document.getElementById('bluetoothDeviceStatus')
    const bluetoothNameElement = document.getElementById('bluetoothDeviceName')
    try {
        bleDevice = await navigator.bluetooth.requestDevice({
            acceptAllDevices: true,
            optionalServices: [SERVICE_UUID]
        });
        bleServer = await bleDevice.gatt.connect();
        bleService = await bleServer.getPrimaryService(SERVICE_UUID);
        bleCharacteristic = await bleService.getCharacteristic(CHARACTERISTIC_UUID);
        bleCharacteristic.addEventListener('characteristicvaluechanged', (event) => {
            // update ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô element
            const decoder = new TextDecoder('utf-8');
            let dataObj = decoder.decode(event.target.value);
            dataObj = JSON.parse(dataObj)
            dataObj['timestamp'] = new Date()
            // console.log("Received JSON: ", dataObj);
            updateElement(dataObj)
        });
        await bleCharacteristic.startNotifications();
        alert(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${bleDevice.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`)
        bluetoothStatusElement.classList.remove('hidden')
        bluetoothStatusElement.classList.add('inline')
        bluetoothStatusElement.classList.remove('bg-red-100')
        bluetoothStatusElement.classList.add('bg-green-100')
        bluetoothNameElement.innerText = `${bleDevice.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‚úÖ`
        console.log(`name:${bleDevice.name} id:${bleDevice.id} Connected and listening for BLE data...`);
    } catch (error) {
        alert(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ${bleDevice.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${error.toString()}`)
        bluetoothStatusElement.classList.remove('hidden')
        bluetoothStatusElement.classList.add('inline')
        bluetoothStatusElement.classList.remove('bg-green-100')
        bluetoothStatusElement.classList.add('bg-red-100')
        bluetoothNameElement.innerText = `${bleDevice.name} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‚ùå`
        console.error("BLE Connection Error: ", error);
    }
}

async function sendDataToBLE(data) {
    if (!bleCharacteristic) {
        console.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö BLE Device");
        return;
    }
    const encoder = new TextEncoder();
    await bleCharacteristic.writeValue(encoder.encode(data));
    console.log(`‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á BLE Device: ${data}`);
}

async function sendDataToBLENoRes(data) {
    if (!bleCharacteristic) {
        console.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö BLE Device");
        return;
    }
    try {
        const encoder = new TextEncoder();
        await bleCharacteristic.writeValueWithoutResponse(encoder.encode(data)); // ‡πÉ‡∏ä‡πâ WithoutResponse
        console.log(`üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á BLE Device: ${data}`);
    } catch (error) {
        console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    }
}


document.addEventListener('DOMContentLoaded', () => {
    selectMode.value = mode;
})