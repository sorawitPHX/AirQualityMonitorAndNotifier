// ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü
const maxDataPoints = 50;
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
// ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö
const fullData = {
    temperature: [],
    humid: [],
    pm25: [],
    co2: [],
    co: []
};

// ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 50 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
const latestData = {
    temperature: [],
    humid: [],
    pm25: [],
    co2: [],
    co: []
};

function loadMoreData(chartContext, xaxis) {
    const chartName = chartContext.w.config.series[0].name; // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    const type = getChartType(chartName); // ‡∏´‡∏≤ key ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å charts
    if (!type || !fullData[type] || !charts[type]) {
        console.log(`type fullData chart ‡πÑ‡∏°‡πà‡∏°‡∏µ`)
        return;
    } // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error
    const combinedData = [...fullData[type]]; // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    // üîµ ‡πÉ‡∏ä‡πâ charts[type] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
    charts[type].updateSeries([{ data: combinedData }]);
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤ key ‡∏Ç‡∏≠‡∏á charts ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡∏µ‡∏£‡∏µ‡∏™‡πå
function getChartType(chartName) {
    let type = Object.keys(charts).find(key => charts[key].w.config.series[0].name === chartName);
    console.log(type)
    return type
}

function createChart(element, label, color) {
    return new ApexCharts(document.querySelector(element), {
        chart: {
            type: "line",
            height: 250,
            animations: {
                enabled: true,
                easing: 'linear',
            },
            toolbar: { show: true },
            zoom: { enabled: true },
            events: {
                beforeZoom: (chartContext, { xaxis }) => {
                    loadMoreData(chartContext, xaxis);
                    // console.log(chartContext)
                }
            }
        },
        series: [{ name: label, data: [] }],
        xaxis: {
            type: "datetime",
            labels: {
                datetimeUTC: false,
            }
        },
        colors: [color],
        dataLabels: {
            enabled: false
        },
        stroke: {
            curve: 'smooth'
        },
        title: {
            text: label,
            align: 'center'
        },
        markers: {
            size: 0
        },
        yaxis: {
            min: 0
        },
        legend: {
            show: true
        },
        noData: { text: "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..." },
        tooltip: {
            enabled: true,
            shared: true,
            intersect: false,
            custom: function ({ series, seriesIndex, dataPointIndex, w }) {
                const timestamp = new Date(w.globals.seriesX[seriesIndex][dataPointIndex]).toLocaleString();
                const value = series[seriesIndex][dataPointIndex];
                return `
                <div class="tooltip p-3">
                    <strong>Timestamp:</strong> ${timestamp}<br>
                    <strong>Value:</strong> ${value}
                </div>
            `;
            }
        }
    });
}


// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡πá‡∏ö
// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
let isUpdating = true;  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏£‡∏≤‡∏ü
function updateChart(type, value, time) {
    console.log(time)
    time = new Date(time).getTime()
    const newTime = new Date()
    // üîµ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    fullData[type].push({ x: newTime, y: value });
    // üîµ ‡∏ï‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà 50 ‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    latestData[type] = fullData[type].slice(-50);
    if (isUpdating) {
        charts[type].updateSeries([{ data: [...latestData[type]] }]);
    }
}

let charts = {}
document.addEventListener('DOMContentLoaded', async () => {
    charts = {
        temperature: createChart("#tempChart", "Temperature (¬∞C)", "#ff0000"),
        humid: createChart("#humidChart", "Humidity (%)", "#0000ff"),
        pm25: createChart("#pmChart", "PM2.5 (ug/m¬≥)", "#00ff00"),
        co2: createChart("#co2Chart", "CO2 (ppm)", "#800080"),
        co: createChart("#coChart", "CO (ppm)", "#ffa500")
    };
    Object.values(charts).forEach(chart => chart.render());
})
